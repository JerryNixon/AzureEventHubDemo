//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace WindowsClient
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace WindowsClient.WindowsClient_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[57];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.StateItems";
            _typeNameTable[3] = "System.Collections.Generic.Dictionary`2<String, Object>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[7] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[8] = "System.MulticastDelegate";
            _typeNameTable[9] = "System.Delegate";
            _typeNameTable[10] = "TimeSpan";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[14] = "Template10.Common.BootStrapper.States";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "Template10.Controls.ModalDialog";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[18] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[19] = "Template10.Converters.ValueWhenConverter";
            _typeNameTable[20] = "WindowsClient.Models.Directions";
            _typeNameTable[21] = "WindowsClient.ViewModels.MainPageViewModel";
            _typeNameTable[22] = "Template10.Mvvm.ViewModelBase";
            _typeNameTable[23] = "Template10.Mvvm.BindableBase";
            _typeNameTable[24] = "System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Minute>";
            _typeNameTable[25] = "System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Minute>";
            _typeNameTable[26] = "WindowsClient.Models.Minute";
            _typeNameTable[27] = "System.DateTime";
            _typeNameTable[28] = "System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Voice>";
            _typeNameTable[29] = "System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Voice>";
            _typeNameTable[30] = "WindowsClient.Models.Voice";
            _typeNameTable[31] = "Int32";
            _typeNameTable[32] = "System.Uri";
            _typeNameTable[33] = "System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Message>";
            _typeNameTable[34] = "System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Message>";
            _typeNameTable[35] = "WindowsClient.Models.Message";
            _typeNameTable[36] = "Template10.Common.IDispatcherWrapper";
            _typeNameTable[37] = "Template10.Common.IStateItems";
            _typeNameTable[38] = "Template10.Controls.PageHeader";
            _typeNameTable[39] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[40] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[41] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[42] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[43] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[44] = "Double";
            _typeNameTable[45] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[46] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[47] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[48] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[49] = "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior";
            _typeNameTable[50] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[51] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[52] = "Microsoft.Xaml.Interactions.Core.ChangePropertyAction";
            _typeNameTable[53] = "Windows.UI.Xaml.PropertyPath";
            _typeNameTable[54] = "WindowsClient.Views.MainPage";
            _typeNameTable[55] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[56] = "Windows.UI.Xaml.Controls.UserControl";

            _typeTable = new global::System.Type[57];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.StateItems);
            _typeTable[3] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[7] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[8] = typeof(global::System.MulticastDelegate);
            _typeTable[9] = typeof(global::System.Delegate);
            _typeTable[10] = typeof(global::System.TimeSpan);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[14] = typeof(global::Template10.Common.BootStrapper.States);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[19] = typeof(global::Template10.Converters.ValueWhenConverter);
            _typeTable[20] = typeof(global::WindowsClient.Models.Directions);
            _typeTable[21] = typeof(global::WindowsClient.ViewModels.MainPageViewModel);
            _typeTable[22] = typeof(global::Template10.Mvvm.ViewModelBase);
            _typeTable[23] = typeof(global::Template10.Mvvm.BindableBase);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WindowsClient.Models.Minute>);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.Collection<global::WindowsClient.Models.Minute>);
            _typeTable[26] = typeof(global::WindowsClient.Models.Minute);
            _typeTable[27] = typeof(global::System.DateTime);
            _typeTable[28] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WindowsClient.Models.Voice>);
            _typeTable[29] = typeof(global::System.Collections.ObjectModel.Collection<global::WindowsClient.Models.Voice>);
            _typeTable[30] = typeof(global::WindowsClient.Models.Voice);
            _typeTable[31] = typeof(global::System.Int32);
            _typeTable[32] = typeof(global::System.Uri);
            _typeTable[33] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WindowsClient.Models.Message>);
            _typeTable[34] = typeof(global::System.Collections.ObjectModel.Collection<global::WindowsClient.Models.Message>);
            _typeTable[35] = typeof(global::WindowsClient.Models.Message);
            _typeTable[36] = typeof(global::Template10.Common.IDispatcherWrapper);
            _typeTable[37] = typeof(global::Template10.Common.IStateItems);
            _typeTable[38] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[40] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[41] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[44] = typeof(global::System.Double);
            _typeTable[45] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[46] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[48] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[49] = typeof(global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior);
            _typeTable[50] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[51] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[52] = typeof(global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction);
            _typeTable[53] = typeof(global::Windows.UI.Xaml.PropertyPath);
            _typeTable[54] = typeof(global::WindowsClient.Views.MainPage);
            _typeTable[55] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[56] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_StateItems() { return new global::Template10.Common.StateItems(); }
        private object Activate_3_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>(); }
        private object Activate_16_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_19_ValueWhenConverter() { return new global::Template10.Converters.ValueWhenConverter(); }
        private object Activate_21_MainPageViewModel() { return new global::WindowsClient.ViewModels.MainPageViewModel(); }
        private object Activate_24_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WindowsClient.Models.Minute>(); }
        private object Activate_25_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WindowsClient.Models.Minute>(); }
        private object Activate_28_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WindowsClient.Models.Voice>(); }
        private object Activate_29_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WindowsClient.Models.Voice>(); }
        private object Activate_30_Voice() { return new global::WindowsClient.Models.Voice(); }
        private object Activate_33_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WindowsClient.Models.Message>(); }
        private object Activate_34_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WindowsClient.Models.Message>(); }
        private object Activate_35_Message() { return new global::WindowsClient.Models.Message(); }
        private object Activate_38_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_46_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_49_EventTriggerBehavior() { return new global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior(); }
        private object Activate_51_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_52_ChangePropertyAction() { return new global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction(); }
        private object Activate_54_MainPage() { return new global::WindowsClient.Views.MainPage(); }
        private void MapAdd_2_StateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_24_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WindowsClient.Models.Minute>)instance;
            var newItem = (global::WindowsClient.Models.Minute)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WindowsClient.Models.Minute>)instance;
            var newItem = (global::WindowsClient.Models.Minute)item;
            collection.Add(newItem);
        }
        private void VectorAdd_28_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WindowsClient.Models.Voice>)instance;
            var newItem = (global::WindowsClient.Models.Voice)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WindowsClient.Models.Voice>)instance;
            var newItem = (global::WindowsClient.Models.Voice)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WindowsClient.Models.Message>)instance;
            var newItem = (global::WindowsClient.Models.Message)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WindowsClient.Models.Message>)instance;
            var newItem = (global::WindowsClient.Models.Message)item;
            collection.Add(newItem);
        }
        private void VectorAdd_46_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_51_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.StateItems
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.Dictionary`2<String, Object>"));
                userType.DictionaryAdd = MapAdd_2_StateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Collections.Generic.Dictionary`2<String, Object>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Dictionary;
                userType.DictionaryAdd = MapAdd_3_Dictionary;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.MulticastDelegate
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 9:   //  System.Delegate
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  TimeSpan
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Boolean
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Template10.Common.BootStrapper.States
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Starting", global::Template10.Common.BootStrapper.States.Starting);
                userType.AddEnumValue("Splashing", global::Template10.Common.BootStrapper.States.Splashing);
                userType.AddEnumValue("ShowingContent", global::Template10.Common.BootStrapper.States.ShowingContent);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Controls.ModalDialog
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Template10.Converters.ValueWhenConverter
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_ValueWhenConverter;
                userType.AddMemberName("When");
                userType.AddMemberName("Value");
                userType.AddMemberName("Otherwise");
                userType.AddMemberName("OtherwiseValueBack");
                userType.AddMemberName("Debug");
                xamlType = userType;
                break;

            case 20:   //  WindowsClient.Models.Directions
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("From", global::WindowsClient.Models.Directions.From);
                userType.AddEnumValue("To", global::WindowsClient.Models.Directions.To);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  WindowsClient.ViewModels.MainPageViewModel
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_21_MainPageViewModel;
                userType.AddMemberName("Minutes");
                userType.AddMemberName("Messages");
                userType.AddMemberName("IsEnabled");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Template10.Mvvm.ViewModelBase
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("Dispatcher");
                userType.AddMemberName("SessionState");
                xamlType = userType;
                break;

            case 23:   //  Template10.Mvvm.BindableBase
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 24:   //  System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Minute>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Minute>"));
                userType.CollectionAdd = VectorAdd_24_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Minute>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_Collection;
                userType.CollectionAdd = VectorAdd_25_Collection;
                xamlType = userType;
                break;

            case 26:   //  WindowsClient.Models.Minute
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Title");
                userType.AddMemberName("Image");
                userType.AddMemberName("Date");
                userType.AddMemberName("DateString");
                userType.AddMemberName("HourString");
                userType.AddMemberName("MinuteString");
                userType.AddMemberName("Items");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  System.DateTime
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Voice>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Voice>"));
                userType.CollectionAdd = VectorAdd_28_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Voice>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_Collection;
                userType.CollectionAdd = VectorAdd_29_Collection;
                xamlType = userType;
                break;

            case 30:   //  WindowsClient.Models.Voice
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.Activator = Activate_30_Voice;
                userType.AddMemberName("SequenceId");
                userType.AddMemberName("WikiId");
                userType.AddMemberName("Url");
                userType.AddMemberName("Phrase");
                userType.AddMemberName("Image");
                userType.AddMemberName("Date");
                userType.AddMemberName("DateString");
                userType.AddMemberName("HourString");
                userType.AddMemberName("MinuteString");
                userType.AddMemberName("IsActive");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Int32
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  System.Uri
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Message>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Message>"));
                userType.CollectionAdd = VectorAdd_33_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  System.Collections.ObjectModel.Collection`1<WindowsClient.Models.Message>
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_34_Collection;
                userType.CollectionAdd = VectorAdd_34_Collection;
                xamlType = userType;
                break;

            case 35:   //  WindowsClient.Models.Message
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_35_Message;
                userType.AddMemberName("Direction");
                userType.AddMemberName("Title");
                userType.AddMemberName("Date");
                userType.AddMemberName("Text");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Template10.Common.IDispatcherWrapper
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Template10.Common.IStateItems
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Template10.Controls.PageHeader
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_38_PageHeader;
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("Frame");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 39:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 41:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Double
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 46:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_46_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Microsoft.Xaml.Interactions.Core.EventTriggerBehavior
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.Activator = Activate_49_EventTriggerBehavior;
                userType.SetContentPropertyName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("EventName");
                userType.AddMemberName("SourceObject");
                xamlType = userType;
                break;

            case 50:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 51:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_51_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  Microsoft.Xaml.Interactions.Core.ChangePropertyAction
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_52_ChangePropertyAction;
                userType.AddMemberName("PropertyName");
                userType.AddMemberName("TargetObject");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 53:   //  Windows.UI.Xaml.PropertyPath
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  WindowsClient.Views.MainPage
                userType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_54_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 56:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.StateItems)Value;
        }
        private object get_1_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_2_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_3_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_3_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_4_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_4_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_5_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_5_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_6_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_7_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_7_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_8_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_8_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootStrapper.States)Value;
        }
        private object get_9_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_10_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_10_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_11_ValueWhenConverter_When(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.When;
        }
        private void set_11_ValueWhenConverter_When(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.When = (global::System.Object)Value;
        }
        private object get_12_ValueWhenConverter_Value(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Value;
        }
        private void set_12_ValueWhenConverter_Value(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Value = (global::System.Object)Value;
        }
        private object get_13_ValueWhenConverter_Otherwise(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Otherwise;
        }
        private void set_13_ValueWhenConverter_Otherwise(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Otherwise = (global::System.Object)Value;
        }
        private object get_14_ValueWhenConverter_OtherwiseValueBack(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.OtherwiseValueBack;
        }
        private void set_14_ValueWhenConverter_OtherwiseValueBack(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.OtherwiseValueBack = (global::System.Object)Value;
        }
        private object get_15_ValueWhenConverter_Debug(object instance)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            return that.Debug;
        }
        private void set_15_ValueWhenConverter_Debug(object instance, object Value)
        {
            var that = (global::Template10.Converters.ValueWhenConverter)instance;
            that.Debug = (global::System.Boolean)Value;
        }
        private object get_16_MainPageViewModel_Minutes(object instance)
        {
            var that = (global::WindowsClient.ViewModels.MainPageViewModel)instance;
            return that.Minutes;
        }
        private object get_17_Minute_Title(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.Title;
        }
        private void set_17_Minute_Title(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_18_Minute_Image(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.Image;
        }
        private void set_18_Minute_Image(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            that.Image = (global::System.String)Value;
        }
        private object get_19_Minute_Date(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.Date;
        }
        private object get_20_Minute_DateString(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.DateString;
        }
        private object get_21_Minute_HourString(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.HourString;
        }
        private object get_22_Minute_MinuteString(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.MinuteString;
        }
        private object get_23_Minute_Items(object instance)
        {
            var that = (global::WindowsClient.Models.Minute)instance;
            return that.Items;
        }
        private object get_24_Voice_SequenceId(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.SequenceId;
        }
        private void set_24_Voice_SequenceId(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.SequenceId = (global::System.Int32)Value;
        }
        private object get_25_Voice_WikiId(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.WikiId;
        }
        private void set_25_Voice_WikiId(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.WikiId = (global::System.String)Value;
        }
        private object get_26_Voice_Url(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.Url;
        }
        private void set_26_Voice_Url(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.Url = (global::System.Uri)Value;
        }
        private object get_27_Voice_Phrase(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.Phrase;
        }
        private void set_27_Voice_Phrase(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.Phrase = (global::System.String)Value;
        }
        private object get_28_Voice_Image(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.Image;
        }
        private void set_28_Voice_Image(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.Image = (global::System.String)Value;
        }
        private object get_29_Voice_Date(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.Date;
        }
        private void set_29_Voice_Date(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.Date = (global::System.DateTime)Value;
        }
        private object get_30_Voice_DateString(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.DateString;
        }
        private object get_31_Voice_HourString(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.HourString;
        }
        private object get_32_Voice_MinuteString(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.MinuteString;
        }
        private object get_33_Voice_IsActive(object instance)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            return that.IsActive;
        }
        private void set_33_Voice_IsActive(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Voice)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_34_MainPageViewModel_Messages(object instance)
        {
            var that = (global::WindowsClient.ViewModels.MainPageViewModel)instance;
            return that.Messages;
        }
        private object get_35_Message_Direction(object instance)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            return that.Direction;
        }
        private void set_35_Message_Direction(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            that.Direction = (global::WindowsClient.Models.Directions)Value;
        }
        private object get_36_Message_Title(object instance)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            return that.Title;
        }
        private void set_36_Message_Title(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_37_Message_Date(object instance)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            return that.Date;
        }
        private void set_37_Message_Date(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            that.Date = (global::System.DateTime)Value;
        }
        private object get_38_Message_Text(object instance)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            return that.Text;
        }
        private void set_38_Message_Text(object instance, object Value)
        {
            var that = (global::WindowsClient.Models.Message)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_39_MainPageViewModel_IsEnabled(object instance)
        {
            var that = (global::WindowsClient.ViewModels.MainPageViewModel)instance;
            return that.IsEnabled;
        }
        private void set_39_MainPageViewModel_IsEnabled(object instance, object Value)
        {
            var that = (global::WindowsClient.ViewModels.MainPageViewModel)instance;
            that.IsEnabled = (global::System.Boolean)Value;
        }
        private object get_40_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_40_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_41_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.Dispatcher;
        }
        private void set_41_ViewModelBase_Dispatcher(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.Dispatcher = (global::Template10.Common.IDispatcherWrapper)Value;
        }
        private object get_42_ViewModelBase_SessionState(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.SessionState;
        }
        private void set_42_ViewModelBase_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }
        private object get_43_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_43_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_44_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_44_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_45_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_45_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_46_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_46_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_47_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_47_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_48_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_48_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_49_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_49_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_50_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_50_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_51_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_51_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_52_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_52_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_53_EventTriggerBehavior_Actions(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.Actions;
        }
        private object get_54_EventTriggerBehavior_EventName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.EventName;
        }
        private void set_54_EventTriggerBehavior_EventName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.EventName = (global::System.String)Value;
        }
        private object get_55_EventTriggerBehavior_SourceObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            return that.SourceObject;
        }
        private void set_55_EventTriggerBehavior_SourceObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.EventTriggerBehavior)instance;
            that.SourceObject = (global::System.Object)Value;
        }
        private object get_56_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior)instance;
            return that.AssociatedObject;
        }
        private object get_57_ChangePropertyAction_PropertyName(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            return that.PropertyName;
        }
        private void set_57_ChangePropertyAction_PropertyName(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            that.PropertyName = (global::Windows.UI.Xaml.PropertyPath)Value;
        }
        private object get_58_ChangePropertyAction_TargetObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            return that.TargetObject;
        }
        private void set_58_ChangePropertyAction_TargetObject(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            that.TargetObject = (global::System.Object)Value;
        }
        private object get_59_ChangePropertyAction_Value(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            return that.Value;
        }
        private void set_59_ChangePropertyAction_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.ChangePropertyAction)instance;
            that.Value = (global::System.Object)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember xamlMember = null;
            global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.StateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_1_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_2_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_3_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_3_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_4_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_4_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_5_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_5_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_6_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_7_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_7_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootStrapper.States");
                xamlMember.Getter = get_8_BootStrapper_CurrentState;
                xamlMember.Setter = set_8_BootStrapper_CurrentState;
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_9_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_10_BootStrapper_ModalContent;
                xamlMember.Setter = set_10_BootStrapper_ModalContent;
                break;
            case "Template10.Converters.ValueWhenConverter.When":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "When", "Object");
                xamlMember.Getter = get_11_ValueWhenConverter_When;
                xamlMember.Setter = set_11_ValueWhenConverter_When;
                break;
            case "Template10.Converters.ValueWhenConverter.Value":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.Getter = get_12_ValueWhenConverter_Value;
                xamlMember.Setter = set_12_ValueWhenConverter_Value;
                break;
            case "Template10.Converters.ValueWhenConverter.Otherwise":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Otherwise", "Object");
                xamlMember.Getter = get_13_ValueWhenConverter_Otherwise;
                xamlMember.Setter = set_13_ValueWhenConverter_Otherwise;
                break;
            case "Template10.Converters.ValueWhenConverter.OtherwiseValueBack":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "OtherwiseValueBack", "Object");
                xamlMember.Getter = get_14_ValueWhenConverter_OtherwiseValueBack;
                xamlMember.Setter = set_14_ValueWhenConverter_OtherwiseValueBack;
                break;
            case "Template10.Converters.ValueWhenConverter.Debug":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Converters.ValueWhenConverter");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Debug", "Boolean");
                xamlMember.Getter = get_15_ValueWhenConverter_Debug;
                xamlMember.Setter = set_15_ValueWhenConverter_Debug;
                break;
            case "WindowsClient.ViewModels.MainPageViewModel.Minutes":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.ViewModels.MainPageViewModel");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Minutes", "System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Minute>");
                xamlMember.Getter = get_16_MainPageViewModel_Minutes;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Minute.Title":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_17_Minute_Title;
                xamlMember.Setter = set_17_Minute_Title;
                break;
            case "WindowsClient.Models.Minute.Image":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Image", "String");
                xamlMember.Getter = get_18_Minute_Image;
                xamlMember.Setter = set_18_Minute_Image;
                break;
            case "WindowsClient.Models.Minute.Date":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_19_Minute_Date;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Minute.DateString":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "DateString", "String");
                xamlMember.Getter = get_20_Minute_DateString;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Minute.HourString":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "HourString", "String");
                xamlMember.Getter = get_21_Minute_HourString;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Minute.MinuteString":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "MinuteString", "String");
                xamlMember.Getter = get_22_Minute_MinuteString;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Minute.Items":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Minute");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Voice>");
                xamlMember.Getter = get_23_Minute_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Voice.SequenceId":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "SequenceId", "Int32");
                xamlMember.Getter = get_24_Voice_SequenceId;
                xamlMember.Setter = set_24_Voice_SequenceId;
                break;
            case "WindowsClient.Models.Voice.WikiId":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "WikiId", "String");
                xamlMember.Getter = get_25_Voice_WikiId;
                xamlMember.Setter = set_25_Voice_WikiId;
                break;
            case "WindowsClient.Models.Voice.Url":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Url", "System.Uri");
                xamlMember.Getter = get_26_Voice_Url;
                xamlMember.Setter = set_26_Voice_Url;
                break;
            case "WindowsClient.Models.Voice.Phrase":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Phrase", "String");
                xamlMember.Getter = get_27_Voice_Phrase;
                xamlMember.Setter = set_27_Voice_Phrase;
                break;
            case "WindowsClient.Models.Voice.Image":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Image", "String");
                xamlMember.Getter = get_28_Voice_Image;
                xamlMember.Setter = set_28_Voice_Image;
                break;
            case "WindowsClient.Models.Voice.Date":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_29_Voice_Date;
                xamlMember.Setter = set_29_Voice_Date;
                break;
            case "WindowsClient.Models.Voice.DateString":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "DateString", "String");
                xamlMember.Getter = get_30_Voice_DateString;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Voice.HourString":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "HourString", "String");
                xamlMember.Getter = get_31_Voice_HourString;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Voice.MinuteString":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "MinuteString", "String");
                xamlMember.Getter = get_32_Voice_MinuteString;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Voice.IsActive":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Voice");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.Getter = get_33_Voice_IsActive;
                xamlMember.Setter = set_33_Voice_IsActive;
                break;
            case "WindowsClient.ViewModels.MainPageViewModel.Messages":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.ViewModels.MainPageViewModel");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Messages", "System.Collections.ObjectModel.ObservableCollection`1<WindowsClient.Models.Message>");
                xamlMember.Getter = get_34_MainPageViewModel_Messages;
                xamlMember.SetIsReadOnly();
                break;
            case "WindowsClient.Models.Message.Direction":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Message");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Direction", "WindowsClient.Models.Directions");
                xamlMember.Getter = get_35_Message_Direction;
                xamlMember.Setter = set_35_Message_Direction;
                break;
            case "WindowsClient.Models.Message.Title":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Message");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_36_Message_Title;
                xamlMember.Setter = set_36_Message_Title;
                break;
            case "WindowsClient.Models.Message.Date":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Message");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_37_Message_Date;
                xamlMember.Setter = set_37_Message_Date;
                break;
            case "WindowsClient.Models.Message.Text":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.Models.Message");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_38_Message_Text;
                xamlMember.Setter = set_38_Message_Text;
                break;
            case "WindowsClient.ViewModels.MainPageViewModel.IsEnabled":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WindowsClient.ViewModels.MainPageViewModel");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "IsEnabled", "Boolean");
                xamlMember.Getter = get_39_MainPageViewModel_IsEnabled;
                xamlMember.Setter = set_39_MainPageViewModel_IsEnabled;
                break;
            case "Template10.Mvvm.ViewModelBase.NavigationService":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_40_ViewModelBase_NavigationService;
                xamlMember.Setter = set_40_ViewModelBase_NavigationService;
                break;
            case "Template10.Mvvm.ViewModelBase.Dispatcher":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Dispatcher", "Template10.Common.IDispatcherWrapper");
                xamlMember.Getter = get_41_ViewModelBase_Dispatcher;
                xamlMember.Setter = set_41_ViewModelBase_Dispatcher;
                break;
            case "Template10.Mvvm.ViewModelBase.SessionState":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_42_ViewModelBase_SessionState;
                xamlMember.Setter = set_42_ViewModelBase_SessionState;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_43_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_44_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_45_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_PageHeader_BackButtonContent;
                xamlMember.Setter = set_46_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_PageHeader_Frame;
                xamlMember.Setter = set_47_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_48_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_49_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_50_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_PageHeader_Text;
                xamlMember.Setter = set_51_PageHeader_Text;
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_52_Interaction_Behaviors;
                xamlMember.Setter = set_52_Interaction_Behaviors;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.Actions":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_EventTriggerBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.EventName":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "EventName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_EventTriggerBehavior_EventName;
                xamlMember.Setter = set_54_EventTriggerBehavior_EventName;
                break;
            case "Microsoft.Xaml.Interactions.Core.EventTriggerBehavior.SourceObject":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.EventTriggerBehavior");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "SourceObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_EventTriggerBehavior_SourceObject;
                xamlMember.Setter = set_55_EventTriggerBehavior_SourceObject;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior.AssociatedObject":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_56_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactions.Core.ChangePropertyAction.PropertyName":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.ChangePropertyAction");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "PropertyName", "Windows.UI.Xaml.PropertyPath");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_ChangePropertyAction_PropertyName;
                xamlMember.Setter = set_57_ChangePropertyAction_PropertyName;
                break;
            case "Microsoft.Xaml.Interactions.Core.ChangePropertyAction.TargetObject":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.ChangePropertyAction");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "TargetObject", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ChangePropertyAction_TargetObject;
                xamlMember.Setter = set_58_ChangePropertyAction_TargetObject;
                break;
            case "Microsoft.Xaml.Interactions.Core.ChangePropertyAction.Value":
                userType = (global::WindowsClient.WindowsClient_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.ChangePropertyAction");
                xamlMember = new global::WindowsClient.WindowsClient_XamlTypeInfo.XamlMember(this, "Value", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_ChangePropertyAction_Value;
                xamlMember.Setter = set_59_ChangePropertyAction_Value;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::WindowsClient.WindowsClient_XamlTypeInfo.XamlSystemBaseType
    {
        global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::WindowsClient.WindowsClient_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

